####### File Header ###########################################################
# Filename: Lab_Ex_1_AbhayMS.py
# Author: Abhay Mulbagal Suchindra
# Course: Numerical Analysis QF607
# Topic: Lab Exercise 1
# Submission Date: 28 Jan 2019
###############################################################################

## import the required libraries:

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d
import scipy.stats as si
from datetime import datetime
from sklearn.linear_model import LinearRegression

#### Set the working directory:

os.chdir("D:/MQF Coursework/Term 3/QF607 Numerical Methods/Assignments Lab/1")

#### Take user inputs:

## Q1 : 
i_minus = 0.01
i_plus = 0.20 # intial estimated values of i- and i+ for bisection search
tol1 = 10 ** (-5) # tolerance for bisection search
tot_tgt = 400_000 # target total value in $
K = 400 # amt saved per month in $
mnth = 240 # no. of months


## Q2 :
tol2 = 10 ** (-5) # tolerance level for Jacobi & Gauss Siedel
n = 100 # dimension for the matrices


## Q3 :
xm = np.array( [2, 3, 4, 5, 7, 10, 15] ) # settlement date (in years)
ym = np.array( [6.01, 6.11, 6.16, 6.22, 6.32, 6.43, 6.56] ) # corresponding interest rates (in %)


## Q4 :
input_df_4 = pd.read_csv('labex1_q4_input.csv') # read the input csv file created with JPM call option prices
S = 56.75 # Spot (closing) price of the JPM option on 15 August, 2014
r = 0.0025 # Interest rate; fed fund rate on 15 August, 2014
option_price_dt = '2014-08-15' # Options are priced on 15 August, 2014
expiration_dt = '2015-01-17' # Expiration date is 17 January, 2015
sigma_minus = 0.001
sigma_plus = 100 # intial estimated values of sigma- and sigma+ for bisection search
tol4 = 10 ** (-5) # tolerance for bisection search


## Q5 :
input_df_5 = pd.read_csv('labex1_q5_input.csv') # read the input csv file created with marks
fin = 0.45 # proportion of final exam marks
asn = 0.20 # proportion of assignment marks
mdt = 0.35 # proportion of midterm marks
peter_asn = 12 # Peter's assignment marks (out of 20)
peter_mdt = 16 # Peter's midterm marks (out of 30)
pass_mark = 50 # Passing marks reqd.



###############################################################################

#### Q1: Suppose you save money by making regular monthly deposits K and annual interest rate
# is i, find an approximation (accurate to 10^-5 for the interest rate i that you will get a total
# value of $400,000 if you save K=$400 per month for 240 months. Choose one of the root
# finding methods that you have learned.

## Define the function for which we need to identify the value of interest rate:
def compd (i):
    tot_calc = ( K * ( ( ( 1 + ( i / 12 ) ) ** mnth ) - 1) ) / ( i / 12)
    diff = tot_calc - tot_tgt
    return ( diff ) 
# compd function ends here

### Use Bisection search to get the value of i:
def bisection1 (x_minus_in, x_plus_in):
    i = 0.5 * ( x_minus_in + x_plus_in )
    val = compd(i)
    
    # if abs ( val ) is less than the tolerance, i is the solution
    while abs( val ) > tol1:
        i = 0.5 * ( x_minus_in + x_plus_in )
        val = compd(i)
        
        # if val < 0, replace x_minus with i and rerun, as solution lies between i and x_plus
        if val < 0:
            x_minus_in = i
            i = 0.5 * ( x_minus_in + x_plus_in )
            val = compd(i)
            
        # if val > 0, replace x_plus with i and rerun, as solution lies between x_minus and i
        elif val > 0:
            x_plus_in = i
            i = 0.5 * ( x_minus_in + x_plus_in )
            val = compd(i)
            
        # error check
        else:
            return ('check the loop!')
         
    return (i)      
# bisection1 function ends here  

# Call the bisection function to get the required interest rate:
p = bisection1( i_minus , i_plus )     

# Print the value :
print ("Q1. The required interest rate 'i' calculated by Bisection Search, is", np.round( p * 100 , 2 ) , "%" ) 


# Q1 is done ##################################################################



#### Q2: Use the Jacobi method and Gauss-Seidel method to solve the following system with
#initial guess = [ 0, 0â€¦..0] for n=100, report the number of steps needed with tolerance of
#10^(-5) for both methods.

## Create the (n X 1) 'b' matrix:
b = np.matrix(np.zeros(n)).reshape((n,1))
b[:,0] = 2
b[0,0] = b[99,0] = 3

## Create the (n X n) 'A' matrix:
A = np.matrix(np.zeros((n,n)))
for i in range(n):
    A[i,i]=4
for i in range(n - 1):
    A[i,i+1]=-1
    A[i+1,i]=-1
    
## Define the jacobi funtion:
def jacobi( A, b, tol ):
    
    # Create the up-triangular matrix:
    U = np.triu( A , k = 1 )
    
    # Create the low-triangular matrix:
    L = np.tril( A, k = -1 )
    
    D_I = ( A-L-U ).I
    s_old = ( np.matrix ( np.zeros ( n ) ) ).reshape( ( n, 1 ) )
    
    for i in range(n):
        s_new = D_I * ( b - ( ( L + U ) * s_old ) )
        
        if ( np.linalg.norm( s_new ) - np.linalg.norm( s_old ) ) < tol:
            print("Q2. The number of steps needed for Jacobi method is" , i+1 )
            #print(s_new)
            break
        
        s_old=s_new
# jacobi function ends here
 

## Define the gauss_seidel funtion:       
def gauss_seidel( A, b, tol ):
    
    # Create the up-triangular matrix:
    U = np.triu(A,k=1)
    
    s_old = (np.matrix( np.zeros ( n ) ) ).reshape( (n, 1) )
    
    for i in range(n):
        s_new = ( ( A - U ).I) * ( b - ( U * s_old ) )
        
        if ( np.linalg.norm( s_new ) - np.linalg.norm( s_old ) ) < tol:
            print("Q2. The number of steps needed for Gauss-Seidel method is", i+1)
            #print(s_new)
            break
        
        s_old=s_new
# gauss_seidel function ends here       
        
 
# Call both the functions:       
jacobi( A, b, tol2 )
gauss_seidel( A, b, tol2 )


# Q2 is done ##################################################################



#### Q3: Draw a yield curve for the following data using the nature cubic Spline interpolation.
#(The second column represents the settlement dates and third column represents the
#corresponding interest rates)

# define the function to interpolate the values for the settlement dates and interest rates:
f_lin = interp1d (xm, ym, kind='cubic' )

# define the new series of settlement dates (in years) which needs to bes used for interpolation:
x_new = list( range( 2, 16 ) )

# Plot the necessary graph; call the interpolation function while plotting:
plt.figure(figsize=(10,7))
plt.plot(xm, ym, 'o', x_new, f_lin(x_new), '--' )
plt.legend(['available data', 'cubic interpolation'], loc='best')
plt.xlabel('Settlement Dates (years)')
plt.ylabel('Interest Rates (%)')
plt.title('Q3. Cubic Spline Interpolation')
plt.show()


# Q3 is done ##################################################################



#### Q4: Use the Black and Scholes call option pricing formula to calculate the implied volatilities
#corresponding to the strike prices given in the given table. (first column, strike price; third
#column, option price) Please use one of the root finding methods taught in this course.
#a. List your answers in a table (strike prices and implied volatilities).
#b. Plot the strike prices against the implied volatilities.
#The closing value of JPMorgan Chase & Co. (JPM) is 56.75 at 15 August, 2014.
#The Expiration date for these options is January 17, 2015.
#The interest is 0.25%. (This is the federal fund rate on 15-August-14).

## Get the required T by calculating the time difference between option_price_dt & expiration_dt:
o_dt = datetime.strptime(option_price_dt, '%Y-%m-%d')
e_dt = datetime.strptime(expiration_dt, '%Y-%m-%d')
T = np.round( (e_dt - o_dt).days / 360 , 4 )

## Get the required T by calculating the time difference between option_price_dt & expiration_dt:
o_dt = datetime.strptime(option_price_dt, '%Y-%m-%d')
e_dt = datetime.strptime(expiration_dt, '%Y-%m-%d')
T = np.round( (e_dt - o_dt).days / 360 , 4 )

## Get the Strike Prices and Option Prices from the input file:
K_list = input_df_4['Strike'].tolist()
op_price_list = input_df_4['Last'].tolist()

## Define the vanilla call option for Black Scholes:
def vanilla_call_BS( K, op_price , sigma ):
      
    d1 = ( np.log( S / K ) + (r + 0.5 * sigma ** 2) * T) / ( sigma * np.sqrt( T ) )
    d2 = d1 - sigma * np.sqrt( T ) 
    
    # Calculate the call option value based on the strike value from the table and sigma
    van_call_bs = (S * si.norm.cdf(d1, 0.0, 1.0) - K * np.exp(-r * T) * si.norm.cdf(d2, 0.0, 1.0))
    
    # Find the difference between the calculated option price and listed option price
    diff = van_call_bs - op_price
    
    return (diff )

## Initialize a list for Implied Volatility:
Imp_vol = []

## Define a function for Brent Search:

def brent_search( x0, x1 , K , op_price):
 
           
    fx0 = vanilla_call_BS( K, op_price , x0 )
    fx1 = vanilla_call_BS( K, op_price , x1 )
 
    assert (fx0 * fx1) <= 0, "Root beyond guess estimates!" 
 
    if abs(fx0) < abs(fx1):
        x0, x1 = x1, x0
        fx0, fx1 = fx1, fx0
 
    x2, fx2 = x0, fx0
 
    mflag = True
    
    while abs(x1-x0) > tol4:
        fx0 = vanilla_call_BS( K, op_price , x0 )
        fx1 = vanilla_call_BS( K, op_price , x1 )
        fx2 = vanilla_call_BS( K, op_price , x2 )
 
        if fx0 != fx2 and fx1 != fx2:
            L0 = (x0 * fx1 * fx2) / ((fx0 - fx1) * (fx0 - fx2))
            L1 = (x1 * fx0 * fx2) / ((fx1 - fx0) * (fx1 - fx2))
            L2 = (x2 * fx1 * fx0) / ((fx2 - fx0) * (fx2 - fx1))
            new = L0 + L1 + L2
 
        else:
            new = x1 - ( (fx1 * (x1 - x0)) / (fx1 - fx0) )
 
        if ((new < ((3 * x0 + x1) / 4) or new > x1) or
            (mflag == True and (abs(new - x1)) >= (abs(x1 - x2) / 2)) or
            (mflag == False and (abs(new - x1)) >= (abs(x2 - d) / 2)) or
            (mflag == True and (abs(x1 - x2)) < tol4) or
            (mflag == False and (abs(x2 - d)) < tol4)):
            new = (x0 + x1) / 2
            mflag = True
 
        else:
            mflag = False
 
        fnew = vanilla_call_BS( K, op_price , new )
        d, x2 = x2, x1
 
        if (fx0 * fnew) < 0:
            x1 = new
        else:
            x0 = new
 
        if abs(fx0) < abs(fx1):
            x0, x1 = x1, x0
      
    Imp_vol.append( round( x1 , 4 ))

# brent_search function ends here 

## Run the function loop for all values of strike prices: 
 
for j in range( len( K_list ) ):
    brent_search(sigma_minus , sigma_plus , K_list[j] , op_price_list[j]) 
    
## Create the required table of Strike Prices vs. Implied Volatilities:

K_ImpVol_df = pd.DataFrame({'Strike Price': K_list, 'Implied Volatility': Imp_vol}) 

### Write the table to Excel
writer = pd.ExcelWriter('LabEx1_q4_output_ams.xlsx')
K_ImpVol_df.to_excel(writer,'Sheet1' )
writer.save()   
print("Q4.a. Table output in Excel Complete!")

### Plot Strike Prices vs. Implied Volatilities:
plt.figure(figsize=(10,7))
plt.plot( K_list, Imp_vol, '--' )
plt.plot( K_list, Imp_vol,'o' )
plt.xlabel('Strike Prices ($)')
plt.ylabel('Implied Volatility')
plt.title('Q4.b. Strike Prices vs. Implied Volatilities')
plt.show()


# Q4 is done ##################################################################



#### Q5: 5.	Peter, who is taking numerical analysis course in one University, 
#thinks that a certain amount of studying could actually improve final grades. 
#However, too much studying would not be warranted. Peterâ€™s ambition (if thatâ€™s what one could call it!)
# is to ultimately graduate with the minimum level of work. 
# There are three weeks to go before the final test and the final mark is determined in the following way: 
# Total mark=20% assignment + 30% Midterm test + 50% Final test. 
# In order to decide how much work to do in the remaining 3 weeks,
# Peter needs to be able to predict the final mark on the basis of the assignment mark and the midterm mark. 
# Peter got 12/20 for assignment and 16/30 for midterm test. 
# Peter then collect the final mark, assignment mark and midterm mark for 30 students who took numerical analysis course last year.
# Please help Peter find the linear regression equation between the final test mark and assignment mark and Midterm mark.
# Can Peter pass this course?  
# Hint: Use QR decomposition to solve this multivariable least squares problem!

## Perform Linear Regression on the 30 students' historical data, Final is the dependent variable 
# Assigment and Midterm are the independent variables

x = input_df_5[['Assignment' , 'Midterm']]
y = input_df_5[['Final']]
regr = LinearRegression().fit(x, y)

# Predict Peter's final exam score from the Multiple Linear Regression Model Created:
peter_fin = regr.predict( np.array ( [[peter_asn , peter_mdt]] ) )

# Report if Peter will pass or not:
peter_tot = peter_fin + peter_asn + peter_mdt
peter_tot = peter_tot[0]

if peter_tot > pass_mark:
    peter = "pass"
else:
    peter = "fail"

# Print the result:    
print("Q5. Peter's total score is", round( peter_tot[0] , 0 ) , "and therefore he will" , peter , "this course."  )


# Q5 is done ##################################################################
