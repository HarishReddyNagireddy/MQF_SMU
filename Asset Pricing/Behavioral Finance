####### File Header #######
# Filename: Behavioral_Finance_AbhayMS.py
# Author: Abhay Mulbagal Suchindra
# Course: Asset Pricing QF600
# Topic: HW 5 - Behavioral Finance
# Submission Date: 28 Nov 2018
###########################

## import the required libraries:

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy as sp

#### Take user inputs:

num = 10_000  # number of observations for Monte Carlo Simulation
delta = 0.99 # reflection of impatience, constant in the pricing kernel, subjective discount factor
gamma = 1 # Lagrange multiplier for portfolio weight constraint
lambd = 2 # lambda, Lagrange multiplier for portfolio weight constraint
Rf = 1.0303 # Risk free rate (not in percentage)
b0_low = [0]
b0_high = [10] # range of b0. b0 is the impact of prospect theory
power10 = -1 # the power of b0_step
b0_step = 1 * (10 ** power10) # stepsize of b0 ## Eg: for b0 step of 0.1, write power10 = -1, b0_step = 1
x_minus = 1
x_plus = 1.1 # intial values of x- and x+ for bisection search
thres = 10 ** (-4) # threshold for bisection search

## set the working directory:

os.chdir("D:/MQF Coursework/Term 2/QF600 Asset Pricing/Assignments/5")

######  Get consumption growth from vectors of epsilon and nu:

epsilon = [sp.random.standard_normal() for i in range(num)]
# epsilon follows standard normal distribution

## get the respective value for consumption growth from the corresponding values of epsilon:
g = [ np.exp( 0.02 + (0.02 * i) ) for i in epsilon ]

#### create a function for nu_cap population:
def nu_cap(R):
    if R >= Rf:
        nu_cap_R = R - Rf
    else:
        nu_cap_R = 2 * ( R - Rf )
    return nu_cap_R
#nu_cap function ends here ###


#### e_x is the error term defined as : e_x = ( delta * b0 * np.mean ( nu_cap (x * g) ) )+ (delta * x) - 1
def e_x(x_val, b0_val):
    
    ## create a nu_cap list from each corresponding value in g:    
    nu_cap_list = [ nu_cap (i * x_val) for i in g]
    
    ## with this nu_cap_list calculate the error value:
    e_x_value = ( delta * b0_val * np.mean ( nu_cap_list ) ) + (delta * x_val) - 1
    return e_x_value
# e_x function ends here      

#### Use Bisection search to get the equilibrium values of x for each b0:
def bisection (x_minus_in, x_plus_in, b0):
    if np.max ( e_x(x_minus_in , b0) ) >= 0 or np.min ( e_x(x_plus_in , b0) ) <= 0 :
        print('x_minus & x_plus conditions are not met')
    else :
        x1 = 0.5 * ( x_minus_in + x_plus_in ) 
        solution = e_x(x1 , b0)
        # if | e_x(x, b0) | is less than the threshold, x is the solution
        while abs ( solution ) > thres:
            x = 0.5 * ( x_minus_in + x_plus_in )
            # if e_x(x, b0) < 0, replace x_minus with x and rerun, as solution lies between x and x_plus
            if e_x(x , b0) < 0:
                x_minus_in = x
                x = 0.5 * ( x_minus_in + x_plus_in )
                solution = e_x(x , b0)
                return solution
            # if e_x(x, b0) > 0, replace x_plus with x and rerun, as solution lies between x_minus and x
            elif e_x(x , b0) > 0:
                x_plus_in = x
                x = 0.5 * ( x_minus_in + x_plus_in )
                solution = e_x(x , b0)
                return solution
            # error check
            else:
                return ('check the loop!')
            
        return (solution)
# bisection function ends here    
    
## generate a list of b0 from the user defined range and stepsize:
low =  b0_low[0] * ( 10 ** (-1 * power10) ) 
high =  b0_high[0] * ( 10 ** (-1 * power10) ) + 1
step = int(b0_step * ( 10 ** (-1 * power10) ))
b0_list = list(range( low, high , step ))
b0_list = [ i/ ( 10 ** (-1 * power10) ) for i in b0_list ]

## Call the Bisection function, for all values of user defined b0, and create P/D = 1/(x-1)
x = [ bisection( x_minus , x_plus , i) for i in b0_list ]
P_by_D = [ 1 / ( i - 1)  for i in x]

## Create dataframe for P_by_D and b0:
df_PD = pd.DataFrame ( { 'P/D': P_by_D , 'b0': b0_list})
#print(df_PD)

## Plot the values for Price-Dividend Ratio vs b0:
plt.style.use('seaborn')
plt.figure(figsize=(8,5))
plt.plot(df_PD['b0'], df_PD['P/D'])
plt.title('Price - Dividend Ratio vs. b0')
plt.ylabel('Price - Dividend Ratio')
plt.xlabel('b0')
plt.show()


#### Equity Premium = Expected Market Return - Rf
Eq_prem = [ ( np.mean( g ) * i ) - Rf for i in x ]

## Create dataframe for Equity Premium and b0:
df_EP = pd.DataFrame ( { 'Equity Premium': Eq_prem , 'b0': b0_list})
#print(df_EP)

## Plot the values for Equity Premium vs b0:
plt.style.use('seaborn')
plt.figure(figsize=(8,5))
plt.plot(df_EP['b0'], df_EP['Equity Premium'])
plt.title('Equity Premium vs. b0')
plt.ylabel('Equity Premium')
plt.xlabel('b0')
plt.show()


